// Copyright 2017 Inca Roads LLC.  All rights reserved.
// Use of this source code is governed by licenses granted by the
// copyright holder including that found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: tt.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TelecastDeviceType int32

const (
	Telecast_UNKNOWN_DEVICE_TYPE TelecastDeviceType = 0
	Telecast_BGEIGIE_NANO        TelecastDeviceType = 1
	Telecast_SOLARCAST           TelecastDeviceType = 2
	Telecast_TTAPP               TelecastDeviceType = 3
	Telecast_TTNODE              TelecastDeviceType = 4
	Telecast_TTGATE              TelecastDeviceType = 5
	Telecast_TTSERVE             TelecastDeviceType = 6
	Telecast_TTGATEPING          TelecastDeviceType = 7
)

// Enum value maps for TelecastDeviceType.
var (
	TelecastDeviceType_name = map[int32]string{
		0: "UNKNOWN_DEVICE_TYPE",
		1: "BGEIGIE_NANO",
		2: "SOLARCAST",
		3: "TTAPP",
		4: "TTNODE",
		5: "TTGATE",
		6: "TTSERVE",
		7: "TTGATEPING",
	}
	TelecastDeviceType_value = map[string]int32{
		"UNKNOWN_DEVICE_TYPE": 0,
		"BGEIGIE_NANO":        1,
		"SOLARCAST":           2,
		"TTAPP":               3,
		"TTNODE":              4,
		"TTGATE":              5,
		"TTSERVE":             6,
		"TTGATEPING":          7,
	}
)

func (x TelecastDeviceType) Enum() *TelecastDeviceType {
	p := new(TelecastDeviceType)
	*p = x
	return p
}

func (x TelecastDeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelecastDeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_tt_proto_enumTypes[0].Descriptor()
}

func (TelecastDeviceType) Type() protoreflect.EnumType {
	return &file_tt_proto_enumTypes[0]
}

func (x TelecastDeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TelecastDeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TelecastDeviceType(num)
	return nil
}

// Deprecated: Use TelecastDeviceType.Descriptor instead.
func (TelecastDeviceType) EnumDescriptor() ([]byte, []int) {
	return file_tt_proto_rawDescGZIP(), []int{0, 0}
}

type TelecastReplyType int32

const (
	Telecast_NO_REPLY TelecastReplyType = 0
	Telecast_ALLOWED  TelecastReplyType = 1
)

// Enum value maps for TelecastReplyType.
var (
	TelecastReplyType_name = map[int32]string{
		0: "NO_REPLY",
		1: "ALLOWED",
	}
	TelecastReplyType_value = map[string]int32{
		"NO_REPLY": 0,
		"ALLOWED":  1,
	}
)

func (x TelecastReplyType) Enum() *TelecastReplyType {
	p := new(TelecastReplyType)
	*p = x
	return p
}

func (x TelecastReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelecastReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_tt_proto_enumTypes[1].Descriptor()
}

func (TelecastReplyType) Type() protoreflect.EnumType {
	return &file_tt_proto_enumTypes[1]
}

func (x TelecastReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TelecastReplyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TelecastReplyType(num)
	return nil
}

// Deprecated: Use TelecastReplyType.Descriptor instead.
func (TelecastReplyType) EnumDescriptor() ([]byte, []int) {
	return file_tt_proto_rawDescGZIP(), []int{0, 1}
}

type Telecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType                      *TelecastDeviceType `protobuf:"varint,1,opt,name=device_type,json=deviceType,enum=ttproto.TelecastDeviceType" json:"device_type,omitempty"`
	DEPRECATED2017FEBDeviceIDString *string             `protobuf:"bytes,2,opt,name=DEPRECATED2017FEBDeviceIDString" json:"DEPRECATED2017FEBDeviceIDString,omitempty"`
	// This field is actually REQUIRED by ttserve
	DeviceId               *uint32            `protobuf:"varint,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Message                *string            `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	CapturedAt             *string            `protobuf:"bytes,5,opt,name=captured_at,json=capturedAt" json:"captured_at,omitempty"`
	ReplyType              *TelecastReplyType `protobuf:"varint,6,opt,name=reply_type,json=replyType,enum=ttproto.TelecastReplyType" json:"reply_type,omitempty"`
	DEPRECATED2017FEBValue *uint32            `protobuf:"varint,7,opt,name=DEPRECATED2017FEBValue" json:"DEPRECATED2017FEBValue,omitempty"`
	Latitude               *float32           `protobuf:"fixed32,8,opt,name=latitude" json:"latitude,omitempty"`
	Longitude              *float32           `protobuf:"fixed32,9,opt,name=longitude" json:"longitude,omitempty"`
	Altitude               *int32             `protobuf:"varint,10,opt,name=altitude" json:"altitude,omitempty"`
	BatVoltage             *float32           `protobuf:"fixed32,11,opt,name=bat_voltage,json=batVoltage" json:"bat_voltage,omitempty"`
	BatSoc                 *float32           `protobuf:"fixed32,12,opt,name=bat_soc,json=batSoc" json:"bat_soc,omitempty"`
	WirelessSnr            *float32           `protobuf:"fixed32,13,opt,name=wireless_snr,json=wirelessSnr" json:"wireless_snr,omitempty"`
	EnvTemp                *float32           `protobuf:"fixed32,14,opt,name=env_temp,json=envTemp" json:"env_temp,omitempty"`
	EnvHumid               *float32           `protobuf:"fixed32,15,opt,name=env_humid,json=envHumid" json:"env_humid,omitempty"`
	RelayDevice1           *uint32            `protobuf:"varint,16,opt,name=relay_device1,json=relayDevice1" json:"relay_device1,omitempty"`
	RelayDevice2           *uint32            `protobuf:"varint,17,opt,name=relay_device2,json=relayDevice2" json:"relay_device2,omitempty"`
	RelayDevice3           *uint32            `protobuf:"varint,18,opt,name=relay_device3,json=relayDevice3" json:"relay_device3,omitempty"`
	RelayDevice4           *uint32            `protobuf:"varint,19,opt,name=relay_device4,json=relayDevice4" json:"relay_device4,omitempty"`
	RelayDevice5           *uint32            `protobuf:"varint,20,opt,name=relay_device5,json=relayDevice5" json:"relay_device5,omitempty"`
	Lnd_7318U              *uint32            `protobuf:"varint,21,opt,name=lnd_7318u,json=lnd7318u" json:"lnd_7318u,omitempty"`
	Lnd_7128Ec             *uint32            `protobuf:"varint,22,opt,name=lnd_7128ec,json=lnd7128ec" json:"lnd_7128ec,omitempty"`
	StatsUptimeMinutes     *uint32            `protobuf:"varint,23,opt,name=stats_uptime_minutes,json=statsUptimeMinutes" json:"stats_uptime_minutes,omitempty"`
	StatsAppVersion        *string            `protobuf:"bytes,24,opt,name=stats_app_version,json=statsAppVersion" json:"stats_app_version,omitempty"`
	StatsDeviceParams      *string            `protobuf:"bytes,25,opt,name=stats_device_params,json=statsDeviceParams" json:"stats_device_params,omitempty"`
	StatsTransmittedBytes  *uint32            `protobuf:"varint,26,opt,name=stats_transmitted_bytes,json=statsTransmittedBytes" json:"stats_transmitted_bytes,omitempty"`
	StatsReceivedBytes     *uint32            `protobuf:"varint,27,opt,name=stats_received_bytes,json=statsReceivedBytes" json:"stats_received_bytes,omitempty"`
	StatsOneshots          *uint32            `protobuf:"varint,28,opt,name=stats_oneshots,json=statsOneshots" json:"stats_oneshots,omitempty"`
	StatsCommsResets       *uint32            `protobuf:"varint,29,opt,name=stats_comms_resets,json=statsCommsResets" json:"stats_comms_resets,omitempty"`
	PmsPm01_0              *uint32            `protobuf:"varint,30,opt,name=pms_pm01_0,json=pmsPm010" json:"pms_pm01_0,omitempty"`
	PmsPm02_5              *uint32            `protobuf:"varint,31,opt,name=pms_pm02_5,json=pmsPm025" json:"pms_pm02_5,omitempty"`
	PmsPm10_0              *uint32            `protobuf:"varint,32,opt,name=pms_pm10_0,json=pmsPm100" json:"pms_pm10_0,omitempty"`
	PmsC00_30              *uint32            `protobuf:"varint,33,opt,name=pms_c00_30,json=pmsC0030" json:"pms_c00_30,omitempty"`
	PmsC00_50              *uint32            `protobuf:"varint,34,opt,name=pms_c00_50,json=pmsC0050" json:"pms_c00_50,omitempty"`
	PmsC01_00              *uint32            `protobuf:"varint,35,opt,name=pms_c01_00,json=pmsC0100" json:"pms_c01_00,omitempty"`
	PmsC02_50              *uint32            `protobuf:"varint,36,opt,name=pms_c02_50,json=pmsC0250" json:"pms_c02_50,omitempty"`
	PmsC05_00              *uint32            `protobuf:"varint,37,opt,name=pms_c05_00,json=pmsC0500" json:"pms_c05_00,omitempty"`
	PmsC10_00              *uint32            `protobuf:"varint,38,opt,name=pms_c10_00,json=pmsC1000" json:"pms_c10_00,omitempty"`
	PmsCsecs               *uint32            `protobuf:"varint,39,opt,name=pms_csecs,json=pmsCsecs" json:"pms_csecs,omitempty"`
	OpcPm01_0              *float32           `protobuf:"fixed32,40,opt,name=opc_pm01_0,json=opcPm010" json:"opc_pm01_0,omitempty"`
	OpcPm02_5              *float32           `protobuf:"fixed32,41,opt,name=opc_pm02_5,json=opcPm025" json:"opc_pm02_5,omitempty"`
	OpcPm10_0              *float32           `protobuf:"fixed32,42,opt,name=opc_pm10_0,json=opcPm100" json:"opc_pm10_0,omitempty"`
	OpcC00_38              *uint32            `protobuf:"varint,43,opt,name=opc_c00_38,json=opcC0038" json:"opc_c00_38,omitempty"`
	OpcC00_54              *uint32            `protobuf:"varint,44,opt,name=opc_c00_54,json=opcC0054" json:"opc_c00_54,omitempty"`
	OpcC01_00              *uint32            `protobuf:"varint,45,opt,name=opc_c01_00,json=opcC0100" json:"opc_c01_00,omitempty"`
	OpcC02_10              *uint32            `protobuf:"varint,46,opt,name=opc_c02_10,json=opcC0210" json:"opc_c02_10,omitempty"`
	OpcC05_00              *uint32            `protobuf:"varint,47,opt,name=opc_c05_00,json=opcC0500" json:"opc_c05_00,omitempty"`
	OpcC10_00              *uint32            `protobuf:"varint,48,opt,name=opc_c10_00,json=opcC1000" json:"opc_c10_00,omitempty"`
	OpcCsecs               *uint32            `protobuf:"varint,49,opt,name=opc_csecs,json=opcCsecs" json:"opc_csecs,omitempty"`
	EnvPressure            *float32           `protobuf:"fixed32,50,opt,name=env_pressure,json=envPressure" json:"env_pressure,omitempty"`
	StatsCommsPowerFails   *uint32            `protobuf:"varint,51,opt,name=stats_comms_power_fails,json=statsCommsPowerFails" json:"stats_comms_power_fails,omitempty"`
	BatCurrent             *float32           `protobuf:"fixed32,52,opt,name=bat_current,json=batCurrent" json:"bat_current,omitempty"`
	StatsIccid             *string            `protobuf:"bytes,53,opt,name=stats_iccid,json=statsIccid" json:"stats_iccid,omitempty"`
	StatsMotionEvents      *uint32            `protobuf:"varint,54,opt,name=stats_motion_events,json=statsMotionEvents" json:"stats_motion_events,omitempty"`
	StatsDfu               *string            `protobuf:"bytes,55,opt,name=stats_dfu,json=statsDfu" json:"stats_dfu,omitempty"`
	CapturedAtDate         *uint32            `protobuf:"varint,56,opt,name=captured_at_date,json=capturedAtDate" json:"captured_at_date,omitempty"`
	CapturedAtTime         *uint32            `protobuf:"varint,57,opt,name=captured_at_time,json=capturedAtTime" json:"captured_at_time,omitempty"`
	CapturedAtOffset       *uint32            `protobuf:"varint,58,opt,name=captured_at_offset,json=capturedAtOffset" json:"captured_at_offset,omitempty"`
	StatsOneshotSeconds    *uint32            `protobuf:"varint,59,opt,name=stats_oneshot_seconds,json=statsOneshotSeconds" json:"stats_oneshot_seconds,omitempty"`
	Stamp                  *uint32            `protobuf:"varint,60,opt,name=stamp" json:"stamp,omitempty"`
	StampVersion           *uint32            `protobuf:"varint,61,opt,name=stamp_version,json=stampVersion" json:"stamp_version,omitempty"`
	StatsCpsi              *string            `protobuf:"bytes,62,opt,name=stats_cpsi,json=statsCpsi" json:"stats_cpsi,omitempty"`
	StatsUptimeDays        *uint32            `protobuf:"varint,63,opt,name=stats_uptime_days,json=statsUptimeDays" json:"stats_uptime_days,omitempty"`
	StatsDeviceLabel       *string            `protobuf:"bytes,64,opt,name=stats_device_label,json=statsDeviceLabel" json:"stats_device_label,omitempty"`
	StatsGpsParams         *string            `protobuf:"bytes,65,opt,name=stats_gps_params,json=statsGpsParams" json:"stats_gps_params,omitempty"`
	StatsServiceParams     *string            `protobuf:"bytes,66,opt,name=stats_service_params,json=statsServiceParams" json:"stats_service_params,omitempty"`
	StatsTtnParams         *string            `protobuf:"bytes,67,opt,name=stats_ttn_params,json=statsTtnParams" json:"stats_ttn_params,omitempty"`
	StatsSensorParams      *string            `protobuf:"bytes,68,opt,name=stats_sensor_params,json=statsSensorParams" json:"stats_sensor_params,omitempty"`
	Lnd_7318C              *uint32            `protobuf:"varint,69,opt,name=lnd_7318c,json=lnd7318c" json:"lnd_7318c,omitempty"`
	StatsBattery           *string            `protobuf:"bytes,70,opt,name=stats_battery,json=statsBattery" json:"stats_battery,omitempty"`
	StatsModuleFona        *string            `protobuf:"bytes,71,opt,name=stats_module_fona,json=statsModuleFona" json:"stats_module_fona,omitempty"`
	StatsModuleLora        *string            `protobuf:"bytes,72,opt,name=stats_module_lora,json=statsModuleLora" json:"stats_module_lora,omitempty"`
	Motion                 *bool              `protobuf:"varint,73,opt,name=motion" json:"motion,omitempty"`
	Test                   *bool              `protobuf:"varint,74,opt,name=test" json:"test,omitempty"`
	EncTemp                *float32           `protobuf:"fixed32,75,opt,name=enc_temp,json=encTemp" json:"enc_temp,omitempty"`
	EncHumid               *float32           `protobuf:"fixed32,76,opt,name=enc_humid,json=encHumid" json:"enc_humid,omitempty"`
	EncPressure            *float32           `protobuf:"fixed32,77,opt,name=enc_pressure,json=encPressure" json:"enc_pressure,omitempty"`
	ErrorsOpc              *uint32            `protobuf:"varint,78,opt,name=errors_opc,json=errorsOpc" json:"errors_opc,omitempty"`
	ErrorsPms              *uint32            `protobuf:"varint,79,opt,name=errors_pms,json=errorsPms" json:"errors_pms,omitempty"`
	ErrorsBme0             *uint32            `protobuf:"varint,80,opt,name=errors_bme0,json=errorsBme0" json:"errors_bme0,omitempty"`
	ErrorsBme1             *uint32            `protobuf:"varint,81,opt,name=errors_bme1,json=errorsBme1" json:"errors_bme1,omitempty"`
	ErrorsLora             *uint32            `protobuf:"varint,82,opt,name=errors_lora,json=errorsLora" json:"errors_lora,omitempty"`
	ErrorsFona             *uint32            `protobuf:"varint,83,opt,name=errors_fona,json=errorsFona" json:"errors_fona,omitempty"`
	ErrorsGeiger           *uint32            `protobuf:"varint,84,opt,name=errors_geiger,json=errorsGeiger" json:"errors_geiger,omitempty"`
	ErrorsMax01            *uint32            `protobuf:"varint,85,opt,name=errors_max01,json=errorsMax01" json:"errors_max01,omitempty"`
	ErrorsUgps             *uint32            `protobuf:"varint,86,opt,name=errors_ugps,json=errorsUgps" json:"errors_ugps,omitempty"`
	ErrorsTwi              *uint32            `protobuf:"varint,87,opt,name=errors_twi,json=errorsTwi" json:"errors_twi,omitempty"`
	ErrorsTwiInfo          *string            `protobuf:"bytes,88,opt,name=errors_twi_info,json=errorsTwiInfo" json:"errors_twi_info,omitempty"`
	ErrorsLis              *uint32            `protobuf:"varint,89,opt,name=errors_lis,json=errorsLis" json:"errors_lis,omitempty"`
	ErrorsSpi              *uint32            `protobuf:"varint,90,opt,name=errors_spi,json=errorsSpi" json:"errors_spi,omitempty"`
	ErrorsConnectLora      *uint32            `protobuf:"varint,91,opt,name=errors_connect_lora,json=errorsConnectLora" json:"errors_connect_lora,omitempty"`
	ErrorsConnectFona      *uint32            `protobuf:"varint,92,opt,name=errors_connect_fona,json=errorsConnectFona" json:"errors_connect_fona,omitempty"`
	ErrorsConnectWireless  *uint32            `protobuf:"varint,93,opt,name=errors_connect_wireless,json=errorsConnectWireless" json:"errors_connect_wireless,omitempty"`
	ErrorsConnectData      *uint32            `protobuf:"varint,94,opt,name=errors_connect_data,json=errorsConnectData" json:"errors_connect_data,omitempty"`
	ErrorsConnectService   *uint32            `protobuf:"varint,95,opt,name=errors_connect_service,json=errorsConnectService" json:"errors_connect_service,omitempty"`
	MotionBeganOffset      *uint32            `protobuf:"varint,96,opt,name=motion_began_offset,json=motionBeganOffset" json:"motion_began_offset,omitempty"`
	ErrorsConnectGateway   *uint32            `protobuf:"varint,97,opt,name=errors_connect_gateway,json=errorsConnectGateway" json:"errors_connect_gateway,omitempty"`
	StatsCommsAntFails     *uint32            `protobuf:"varint,98,opt,name=stats_comms_ant_fails,json=statsCommsAntFails" json:"stats_comms_ant_fails,omitempty"`
	Lnd_712U               *uint32            `protobuf:"varint,99,opt,name=lnd_712u,json=lnd712u" json:"lnd_712u,omitempty"`
	Lnd_78017W             *uint32            `protobuf:"varint,100,opt,name=lnd_78017w,json=lnd78017w" json:"lnd_78017w,omitempty"`
	StatsOvercurrentEvents *uint32            `protobuf:"varint,101,opt,name=stats_overcurrent_events,json=statsOvercurrentEvents" json:"stats_overcurrent_events,omitempty"`
	PmsStd01_0             *float32           `protobuf:"fixed32,102,opt,name=pms_std01_0,json=pmsStd010" json:"pms_std01_0,omitempty"`
	PmsStd02_5             *float32           `protobuf:"fixed32,103,opt,name=pms_std02_5,json=pmsStd025" json:"pms_std02_5,omitempty"`
	PmsStd10_0             *float32           `protobuf:"fixed32,104,opt,name=pms_std10_0,json=pmsStd100" json:"pms_std10_0,omitempty"`
	OpcStd01_0             *float32           `protobuf:"fixed32,105,opt,name=opc_std01_0,json=opcStd010" json:"opc_std01_0,omitempty"`
	OpcStd02_5             *float32           `protobuf:"fixed32,106,opt,name=opc_std02_5,json=opcStd025" json:"opc_std02_5,omitempty"`
	OpcStd10_0             *float32           `protobuf:"fixed32,107,opt,name=opc_std10_0,json=opcStd100" json:"opc_std10_0,omitempty"`
	ErrorsMtu              *uint32            `protobuf:"varint,108,opt,name=errors_mtu,json=errorsMtu" json:"errors_mtu,omitempty"`
	StatsSeqno             *uint32            `protobuf:"varint,109,opt,name=stats_seqno,json=statsSeqno" json:"stats_seqno,omitempty"`
	Pms2Pm01_0             *uint32            `protobuf:"varint,110,opt,name=pms2_pm01_0,json=pms2Pm010" json:"pms2_pm01_0,omitempty"`
	Pms2Pm02_5             *uint32            `protobuf:"varint,111,opt,name=pms2_pm02_5,json=pms2Pm025" json:"pms2_pm02_5,omitempty"`
	Pms2Pm10_0             *uint32            `protobuf:"varint,112,opt,name=pms2_pm10_0,json=pms2Pm100" json:"pms2_pm10_0,omitempty"`
	Pms2C00_30             *uint32            `protobuf:"varint,113,opt,name=pms2_c00_30,json=pms2C0030" json:"pms2_c00_30,omitempty"`
	Pms2C00_50             *uint32            `protobuf:"varint,114,opt,name=pms2_c00_50,json=pms2C0050" json:"pms2_c00_50,omitempty"`
	Pms2C01_00             *uint32            `protobuf:"varint,115,opt,name=pms2_c01_00,json=pms2C0100" json:"pms2_c01_00,omitempty"`
	Pms2C02_50             *uint32            `protobuf:"varint,116,opt,name=pms2_c02_50,json=pms2C0250" json:"pms2_c02_50,omitempty"`
	Pms2C05_00             *uint32            `protobuf:"varint,117,opt,name=pms2_c05_00,json=pms2C0500" json:"pms2_c05_00,omitempty"`
	Pms2C10_00             *uint32            `protobuf:"varint,118,opt,name=pms2_c10_00,json=pms2C1000" json:"pms2_c10_00,omitempty"`
	Pms2Csecs              *uint32            `protobuf:"varint,119,opt,name=pms2_csecs,json=pms2Csecs" json:"pms2_csecs,omitempty"`
	ErrorsPms2             *uint32            `protobuf:"varint,120,opt,name=errors_pms2,json=errorsPms2" json:"errors_pms2,omitempty"`
	Pms2Std01_0            *float32           `protobuf:"fixed32,121,opt,name=pms2_std01_0,json=pms2Std010" json:"pms2_std01_0,omitempty"`
	Pms2Std02_5            *float32           `protobuf:"fixed32,122,opt,name=pms2_std02_5,json=pms2Std025" json:"pms2_std02_5,omitempty"`
	Pms2Std10_0            *float32           `protobuf:"fixed32,123,opt,name=pms2_std10_0,json=pms2Std100" json:"pms2_std10_0,omitempty"`
}

func (x *Telecast) Reset() {
	*x = Telecast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telecast) ProtoMessage() {}

func (x *Telecast) ProtoReflect() protoreflect.Message {
	mi := &file_tt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telecast.ProtoReflect.Descriptor instead.
func (*Telecast) Descriptor() ([]byte, []int) {
	return file_tt_proto_rawDescGZIP(), []int{0}
}

func (x *Telecast) GetDeviceType() TelecastDeviceType {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return Telecast_UNKNOWN_DEVICE_TYPE
}

func (x *Telecast) GetDEPRECATED2017FEBDeviceIDString() string {
	if x != nil && x.DEPRECATED2017FEBDeviceIDString != nil {
		return *x.DEPRECATED2017FEBDeviceIDString
	}
	return ""
}

func (x *Telecast) GetDeviceId() uint32 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *Telecast) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Telecast) GetCapturedAt() string {
	if x != nil && x.CapturedAt != nil {
		return *x.CapturedAt
	}
	return ""
}

func (x *Telecast) GetReplyType() TelecastReplyType {
	if x != nil && x.ReplyType != nil {
		return *x.ReplyType
	}
	return Telecast_NO_REPLY
}

func (x *Telecast) GetDEPRECATED2017FEBValue() uint32 {
	if x != nil && x.DEPRECATED2017FEBValue != nil {
		return *x.DEPRECATED2017FEBValue
	}
	return 0
}

func (x *Telecast) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *Telecast) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *Telecast) GetAltitude() int32 {
	if x != nil && x.Altitude != nil {
		return *x.Altitude
	}
	return 0
}

func (x *Telecast) GetBatVoltage() float32 {
	if x != nil && x.BatVoltage != nil {
		return *x.BatVoltage
	}
	return 0
}

func (x *Telecast) GetBatSoc() float32 {
	if x != nil && x.BatSoc != nil {
		return *x.BatSoc
	}
	return 0
}

func (x *Telecast) GetWirelessSnr() float32 {
	if x != nil && x.WirelessSnr != nil {
		return *x.WirelessSnr
	}
	return 0
}

func (x *Telecast) GetEnvTemp() float32 {
	if x != nil && x.EnvTemp != nil {
		return *x.EnvTemp
	}
	return 0
}

func (x *Telecast) GetEnvHumid() float32 {
	if x != nil && x.EnvHumid != nil {
		return *x.EnvHumid
	}
	return 0
}

func (x *Telecast) GetRelayDevice1() uint32 {
	if x != nil && x.RelayDevice1 != nil {
		return *x.RelayDevice1
	}
	return 0
}

func (x *Telecast) GetRelayDevice2() uint32 {
	if x != nil && x.RelayDevice2 != nil {
		return *x.RelayDevice2
	}
	return 0
}

func (x *Telecast) GetRelayDevice3() uint32 {
	if x != nil && x.RelayDevice3 != nil {
		return *x.RelayDevice3
	}
	return 0
}

func (x *Telecast) GetRelayDevice4() uint32 {
	if x != nil && x.RelayDevice4 != nil {
		return *x.RelayDevice4
	}
	return 0
}

func (x *Telecast) GetRelayDevice5() uint32 {
	if x != nil && x.RelayDevice5 != nil {
		return *x.RelayDevice5
	}
	return 0
}

func (x *Telecast) GetLnd_7318U() uint32 {
	if x != nil && x.Lnd_7318U != nil {
		return *x.Lnd_7318U
	}
	return 0
}

func (x *Telecast) GetLnd_7128Ec() uint32 {
	if x != nil && x.Lnd_7128Ec != nil {
		return *x.Lnd_7128Ec
	}
	return 0
}

func (x *Telecast) GetStatsUptimeMinutes() uint32 {
	if x != nil && x.StatsUptimeMinutes != nil {
		return *x.StatsUptimeMinutes
	}
	return 0
}

func (x *Telecast) GetStatsAppVersion() string {
	if x != nil && x.StatsAppVersion != nil {
		return *x.StatsAppVersion
	}
	return ""
}

func (x *Telecast) GetStatsDeviceParams() string {
	if x != nil && x.StatsDeviceParams != nil {
		return *x.StatsDeviceParams
	}
	return ""
}

func (x *Telecast) GetStatsTransmittedBytes() uint32 {
	if x != nil && x.StatsTransmittedBytes != nil {
		return *x.StatsTransmittedBytes
	}
	return 0
}

func (x *Telecast) GetStatsReceivedBytes() uint32 {
	if x != nil && x.StatsReceivedBytes != nil {
		return *x.StatsReceivedBytes
	}
	return 0
}

func (x *Telecast) GetStatsOneshots() uint32 {
	if x != nil && x.StatsOneshots != nil {
		return *x.StatsOneshots
	}
	return 0
}

func (x *Telecast) GetStatsCommsResets() uint32 {
	if x != nil && x.StatsCommsResets != nil {
		return *x.StatsCommsResets
	}
	return 0
}

func (x *Telecast) GetPmsPm01_0() uint32 {
	if x != nil && x.PmsPm01_0 != nil {
		return *x.PmsPm01_0
	}
	return 0
}

func (x *Telecast) GetPmsPm02_5() uint32 {
	if x != nil && x.PmsPm02_5 != nil {
		return *x.PmsPm02_5
	}
	return 0
}

func (x *Telecast) GetPmsPm10_0() uint32 {
	if x != nil && x.PmsPm10_0 != nil {
		return *x.PmsPm10_0
	}
	return 0
}

func (x *Telecast) GetPmsC00_30() uint32 {
	if x != nil && x.PmsC00_30 != nil {
		return *x.PmsC00_30
	}
	return 0
}

func (x *Telecast) GetPmsC00_50() uint32 {
	if x != nil && x.PmsC00_50 != nil {
		return *x.PmsC00_50
	}
	return 0
}

func (x *Telecast) GetPmsC01_00() uint32 {
	if x != nil && x.PmsC01_00 != nil {
		return *x.PmsC01_00
	}
	return 0
}

func (x *Telecast) GetPmsC02_50() uint32 {
	if x != nil && x.PmsC02_50 != nil {
		return *x.PmsC02_50
	}
	return 0
}

func (x *Telecast) GetPmsC05_00() uint32 {
	if x != nil && x.PmsC05_00 != nil {
		return *x.PmsC05_00
	}
	return 0
}

func (x *Telecast) GetPmsC10_00() uint32 {
	if x != nil && x.PmsC10_00 != nil {
		return *x.PmsC10_00
	}
	return 0
}

func (x *Telecast) GetPmsCsecs() uint32 {
	if x != nil && x.PmsCsecs != nil {
		return *x.PmsCsecs
	}
	return 0
}

func (x *Telecast) GetOpcPm01_0() float32 {
	if x != nil && x.OpcPm01_0 != nil {
		return *x.OpcPm01_0
	}
	return 0
}

func (x *Telecast) GetOpcPm02_5() float32 {
	if x != nil && x.OpcPm02_5 != nil {
		return *x.OpcPm02_5
	}
	return 0
}

func (x *Telecast) GetOpcPm10_0() float32 {
	if x != nil && x.OpcPm10_0 != nil {
		return *x.OpcPm10_0
	}
	return 0
}

func (x *Telecast) GetOpcC00_38() uint32 {
	if x != nil && x.OpcC00_38 != nil {
		return *x.OpcC00_38
	}
	return 0
}

func (x *Telecast) GetOpcC00_54() uint32 {
	if x != nil && x.OpcC00_54 != nil {
		return *x.OpcC00_54
	}
	return 0
}

func (x *Telecast) GetOpcC01_00() uint32 {
	if x != nil && x.OpcC01_00 != nil {
		return *x.OpcC01_00
	}
	return 0
}

func (x *Telecast) GetOpcC02_10() uint32 {
	if x != nil && x.OpcC02_10 != nil {
		return *x.OpcC02_10
	}
	return 0
}

func (x *Telecast) GetOpcC05_00() uint32 {
	if x != nil && x.OpcC05_00 != nil {
		return *x.OpcC05_00
	}
	return 0
}

func (x *Telecast) GetOpcC10_00() uint32 {
	if x != nil && x.OpcC10_00 != nil {
		return *x.OpcC10_00
	}
	return 0
}

func (x *Telecast) GetOpcCsecs() uint32 {
	if x != nil && x.OpcCsecs != nil {
		return *x.OpcCsecs
	}
	return 0
}

func (x *Telecast) GetEnvPressure() float32 {
	if x != nil && x.EnvPressure != nil {
		return *x.EnvPressure
	}
	return 0
}

func (x *Telecast) GetStatsCommsPowerFails() uint32 {
	if x != nil && x.StatsCommsPowerFails != nil {
		return *x.StatsCommsPowerFails
	}
	return 0
}

func (x *Telecast) GetBatCurrent() float32 {
	if x != nil && x.BatCurrent != nil {
		return *x.BatCurrent
	}
	return 0
}

func (x *Telecast) GetStatsIccid() string {
	if x != nil && x.StatsIccid != nil {
		return *x.StatsIccid
	}
	return ""
}

func (x *Telecast) GetStatsMotionEvents() uint32 {
	if x != nil && x.StatsMotionEvents != nil {
		return *x.StatsMotionEvents
	}
	return 0
}

func (x *Telecast) GetStatsDfu() string {
	if x != nil && x.StatsDfu != nil {
		return *x.StatsDfu
	}
	return ""
}

func (x *Telecast) GetCapturedAtDate() uint32 {
	if x != nil && x.CapturedAtDate != nil {
		return *x.CapturedAtDate
	}
	return 0
}

func (x *Telecast) GetCapturedAtTime() uint32 {
	if x != nil && x.CapturedAtTime != nil {
		return *x.CapturedAtTime
	}
	return 0
}

func (x *Telecast) GetCapturedAtOffset() uint32 {
	if x != nil && x.CapturedAtOffset != nil {
		return *x.CapturedAtOffset
	}
	return 0
}

func (x *Telecast) GetStatsOneshotSeconds() uint32 {
	if x != nil && x.StatsOneshotSeconds != nil {
		return *x.StatsOneshotSeconds
	}
	return 0
}

func (x *Telecast) GetStamp() uint32 {
	if x != nil && x.Stamp != nil {
		return *x.Stamp
	}
	return 0
}

func (x *Telecast) GetStampVersion() uint32 {
	if x != nil && x.StampVersion != nil {
		return *x.StampVersion
	}
	return 0
}

func (x *Telecast) GetStatsCpsi() string {
	if x != nil && x.StatsCpsi != nil {
		return *x.StatsCpsi
	}
	return ""
}

func (x *Telecast) GetStatsUptimeDays() uint32 {
	if x != nil && x.StatsUptimeDays != nil {
		return *x.StatsUptimeDays
	}
	return 0
}

func (x *Telecast) GetStatsDeviceLabel() string {
	if x != nil && x.StatsDeviceLabel != nil {
		return *x.StatsDeviceLabel
	}
	return ""
}

func (x *Telecast) GetStatsGpsParams() string {
	if x != nil && x.StatsGpsParams != nil {
		return *x.StatsGpsParams
	}
	return ""
}

func (x *Telecast) GetStatsServiceParams() string {
	if x != nil && x.StatsServiceParams != nil {
		return *x.StatsServiceParams
	}
	return ""
}

func (x *Telecast) GetStatsTtnParams() string {
	if x != nil && x.StatsTtnParams != nil {
		return *x.StatsTtnParams
	}
	return ""
}

func (x *Telecast) GetStatsSensorParams() string {
	if x != nil && x.StatsSensorParams != nil {
		return *x.StatsSensorParams
	}
	return ""
}

func (x *Telecast) GetLnd_7318C() uint32 {
	if x != nil && x.Lnd_7318C != nil {
		return *x.Lnd_7318C
	}
	return 0
}

func (x *Telecast) GetStatsBattery() string {
	if x != nil && x.StatsBattery != nil {
		return *x.StatsBattery
	}
	return ""
}

func (x *Telecast) GetStatsModuleFona() string {
	if x != nil && x.StatsModuleFona != nil {
		return *x.StatsModuleFona
	}
	return ""
}

func (x *Telecast) GetStatsModuleLora() string {
	if x != nil && x.StatsModuleLora != nil {
		return *x.StatsModuleLora
	}
	return ""
}

func (x *Telecast) GetMotion() bool {
	if x != nil && x.Motion != nil {
		return *x.Motion
	}
	return false
}

func (x *Telecast) GetTest() bool {
	if x != nil && x.Test != nil {
		return *x.Test
	}
	return false
}

func (x *Telecast) GetEncTemp() float32 {
	if x != nil && x.EncTemp != nil {
		return *x.EncTemp
	}
	return 0
}

func (x *Telecast) GetEncHumid() float32 {
	if x != nil && x.EncHumid != nil {
		return *x.EncHumid
	}
	return 0
}

func (x *Telecast) GetEncPressure() float32 {
	if x != nil && x.EncPressure != nil {
		return *x.EncPressure
	}
	return 0
}

func (x *Telecast) GetErrorsOpc() uint32 {
	if x != nil && x.ErrorsOpc != nil {
		return *x.ErrorsOpc
	}
	return 0
}

func (x *Telecast) GetErrorsPms() uint32 {
	if x != nil && x.ErrorsPms != nil {
		return *x.ErrorsPms
	}
	return 0
}

func (x *Telecast) GetErrorsBme0() uint32 {
	if x != nil && x.ErrorsBme0 != nil {
		return *x.ErrorsBme0
	}
	return 0
}

func (x *Telecast) GetErrorsBme1() uint32 {
	if x != nil && x.ErrorsBme1 != nil {
		return *x.ErrorsBme1
	}
	return 0
}

func (x *Telecast) GetErrorsLora() uint32 {
	if x != nil && x.ErrorsLora != nil {
		return *x.ErrorsLora
	}
	return 0
}

func (x *Telecast) GetErrorsFona() uint32 {
	if x != nil && x.ErrorsFona != nil {
		return *x.ErrorsFona
	}
	return 0
}

func (x *Telecast) GetErrorsGeiger() uint32 {
	if x != nil && x.ErrorsGeiger != nil {
		return *x.ErrorsGeiger
	}
	return 0
}

func (x *Telecast) GetErrorsMax01() uint32 {
	if x != nil && x.ErrorsMax01 != nil {
		return *x.ErrorsMax01
	}
	return 0
}

func (x *Telecast) GetErrorsUgps() uint32 {
	if x != nil && x.ErrorsUgps != nil {
		return *x.ErrorsUgps
	}
	return 0
}

func (x *Telecast) GetErrorsTwi() uint32 {
	if x != nil && x.ErrorsTwi != nil {
		return *x.ErrorsTwi
	}
	return 0
}

func (x *Telecast) GetErrorsTwiInfo() string {
	if x != nil && x.ErrorsTwiInfo != nil {
		return *x.ErrorsTwiInfo
	}
	return ""
}

func (x *Telecast) GetErrorsLis() uint32 {
	if x != nil && x.ErrorsLis != nil {
		return *x.ErrorsLis
	}
	return 0
}

func (x *Telecast) GetErrorsSpi() uint32 {
	if x != nil && x.ErrorsSpi != nil {
		return *x.ErrorsSpi
	}
	return 0
}

func (x *Telecast) GetErrorsConnectLora() uint32 {
	if x != nil && x.ErrorsConnectLora != nil {
		return *x.ErrorsConnectLora
	}
	return 0
}

func (x *Telecast) GetErrorsConnectFona() uint32 {
	if x != nil && x.ErrorsConnectFona != nil {
		return *x.ErrorsConnectFona
	}
	return 0
}

func (x *Telecast) GetErrorsConnectWireless() uint32 {
	if x != nil && x.ErrorsConnectWireless != nil {
		return *x.ErrorsConnectWireless
	}
	return 0
}

func (x *Telecast) GetErrorsConnectData() uint32 {
	if x != nil && x.ErrorsConnectData != nil {
		return *x.ErrorsConnectData
	}
	return 0
}

func (x *Telecast) GetErrorsConnectService() uint32 {
	if x != nil && x.ErrorsConnectService != nil {
		return *x.ErrorsConnectService
	}
	return 0
}

func (x *Telecast) GetMotionBeganOffset() uint32 {
	if x != nil && x.MotionBeganOffset != nil {
		return *x.MotionBeganOffset
	}
	return 0
}

func (x *Telecast) GetErrorsConnectGateway() uint32 {
	if x != nil && x.ErrorsConnectGateway != nil {
		return *x.ErrorsConnectGateway
	}
	return 0
}

func (x *Telecast) GetStatsCommsAntFails() uint32 {
	if x != nil && x.StatsCommsAntFails != nil {
		return *x.StatsCommsAntFails
	}
	return 0
}

func (x *Telecast) GetLnd_712U() uint32 {
	if x != nil && x.Lnd_712U != nil {
		return *x.Lnd_712U
	}
	return 0
}

func (x *Telecast) GetLnd_78017W() uint32 {
	if x != nil && x.Lnd_78017W != nil {
		return *x.Lnd_78017W
	}
	return 0
}

func (x *Telecast) GetStatsOvercurrentEvents() uint32 {
	if x != nil && x.StatsOvercurrentEvents != nil {
		return *x.StatsOvercurrentEvents
	}
	return 0
}

func (x *Telecast) GetPmsStd01_0() float32 {
	if x != nil && x.PmsStd01_0 != nil {
		return *x.PmsStd01_0
	}
	return 0
}

func (x *Telecast) GetPmsStd02_5() float32 {
	if x != nil && x.PmsStd02_5 != nil {
		return *x.PmsStd02_5
	}
	return 0
}

func (x *Telecast) GetPmsStd10_0() float32 {
	if x != nil && x.PmsStd10_0 != nil {
		return *x.PmsStd10_0
	}
	return 0
}

func (x *Telecast) GetOpcStd01_0() float32 {
	if x != nil && x.OpcStd01_0 != nil {
		return *x.OpcStd01_0
	}
	return 0
}

func (x *Telecast) GetOpcStd02_5() float32 {
	if x != nil && x.OpcStd02_5 != nil {
		return *x.OpcStd02_5
	}
	return 0
}

func (x *Telecast) GetOpcStd10_0() float32 {
	if x != nil && x.OpcStd10_0 != nil {
		return *x.OpcStd10_0
	}
	return 0
}

func (x *Telecast) GetErrorsMtu() uint32 {
	if x != nil && x.ErrorsMtu != nil {
		return *x.ErrorsMtu
	}
	return 0
}

func (x *Telecast) GetStatsSeqno() uint32 {
	if x != nil && x.StatsSeqno != nil {
		return *x.StatsSeqno
	}
	return 0
}

func (x *Telecast) GetPms2Pm01_0() uint32 {
	if x != nil && x.Pms2Pm01_0 != nil {
		return *x.Pms2Pm01_0
	}
	return 0
}

func (x *Telecast) GetPms2Pm02_5() uint32 {
	if x != nil && x.Pms2Pm02_5 != nil {
		return *x.Pms2Pm02_5
	}
	return 0
}

func (x *Telecast) GetPms2Pm10_0() uint32 {
	if x != nil && x.Pms2Pm10_0 != nil {
		return *x.Pms2Pm10_0
	}
	return 0
}

func (x *Telecast) GetPms2C00_30() uint32 {
	if x != nil && x.Pms2C00_30 != nil {
		return *x.Pms2C00_30
	}
	return 0
}

func (x *Telecast) GetPms2C00_50() uint32 {
	if x != nil && x.Pms2C00_50 != nil {
		return *x.Pms2C00_50
	}
	return 0
}

func (x *Telecast) GetPms2C01_00() uint32 {
	if x != nil && x.Pms2C01_00 != nil {
		return *x.Pms2C01_00
	}
	return 0
}

func (x *Telecast) GetPms2C02_50() uint32 {
	if x != nil && x.Pms2C02_50 != nil {
		return *x.Pms2C02_50
	}
	return 0
}

func (x *Telecast) GetPms2C05_00() uint32 {
	if x != nil && x.Pms2C05_00 != nil {
		return *x.Pms2C05_00
	}
	return 0
}

func (x *Telecast) GetPms2C10_00() uint32 {
	if x != nil && x.Pms2C10_00 != nil {
		return *x.Pms2C10_00
	}
	return 0
}

func (x *Telecast) GetPms2Csecs() uint32 {
	if x != nil && x.Pms2Csecs != nil {
		return *x.Pms2Csecs
	}
	return 0
}

func (x *Telecast) GetErrorsPms2() uint32 {
	if x != nil && x.ErrorsPms2 != nil {
		return *x.ErrorsPms2
	}
	return 0
}

func (x *Telecast) GetPms2Std01_0() float32 {
	if x != nil && x.Pms2Std01_0 != nil {
		return *x.Pms2Std01_0
	}
	return 0
}

func (x *Telecast) GetPms2Std02_5() float32 {
	if x != nil && x.Pms2Std02_5 != nil {
		return *x.Pms2Std02_5
	}
	return 0
}

func (x *Telecast) GetPms2Std10_0() float32 {
	if x != nil && x.Pms2Std10_0 != nil {
		return *x.Pms2Std10_0
	}
	return 0
}

var File_tt_proto protoreflect.FileDescriptor

var file_tt_proto_rawDesc = []byte{
	0x0a, 0x08, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x24, 0x0a, 0x08, 0x54, 0x65, 0x6c, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x48, 0x0a, 0x1f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x32, 0x30, 0x31,
	0x37, 0x46, 0x45, 0x42, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x32, 0x30, 0x31, 0x37, 0x46, 0x45, 0x42, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x32, 0x30, 0x31, 0x37, 0x46,
	0x45, 0x42, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x32, 0x30, 0x31, 0x37, 0x46, 0x45, 0x42,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x61, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x62, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x61, 0x74, 0x5f, 0x73, 0x6f, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x62,
	0x61, 0x74, 0x53, 0x6f, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x6e, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x77, 0x69, 0x72,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x6e, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x54,
	0x65, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x5f, 0x68, 0x75, 0x6d, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x48, 0x75, 0x6d, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x32, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x33, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x33, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x34,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x35, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x35, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6e, 0x64,
	0x5f, 0x37, 0x33, 0x31, 0x38, 0x75, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6e,
	0x64, 0x37, 0x33, 0x31, 0x38, 0x75, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6e, 0x64, 0x5f, 0x37, 0x31,
	0x32, 0x38, 0x65, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6e, 0x64, 0x37,
	0x31, 0x32, 0x38, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x6e, 0x65, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x6d, 0x73, 0x5f, 0x70, 0x6d, 0x30, 0x31, 0x5f, 0x30,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6d, 0x73, 0x50, 0x6d, 0x30, 0x31, 0x30,
	0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x6d, 0x73, 0x5f, 0x70, 0x6d, 0x30, 0x32, 0x5f, 0x35, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6d, 0x73, 0x50, 0x6d, 0x30, 0x32, 0x35, 0x12, 0x1c,
	0x0a, 0x0a, 0x70, 0x6d, 0x73, 0x5f, 0x70, 0x6d, 0x31, 0x30, 0x5f, 0x30, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6d, 0x73, 0x50, 0x6d, 0x31, 0x30, 0x30, 0x12, 0x1c, 0x0a, 0x0a,
	0x70, 0x6d, 0x73, 0x5f, 0x63, 0x30, 0x30, 0x5f, 0x33, 0x30, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x6d, 0x73, 0x43, 0x30, 0x30, 0x33, 0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x6d,
	0x73, 0x5f, 0x63, 0x30, 0x30, 0x5f, 0x35, 0x30, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x6d, 0x73, 0x43, 0x30, 0x30, 0x35, 0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x6d, 0x73, 0x5f,
	0x63, 0x30, 0x31, 0x5f, 0x30, 0x30, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6d,
	0x73, 0x43, 0x30, 0x31, 0x30, 0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x6d, 0x73, 0x5f, 0x63, 0x30,
	0x32, 0x5f, 0x35, 0x30, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6d, 0x73, 0x43,
	0x30, 0x32, 0x35, 0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x6d, 0x73, 0x5f, 0x63, 0x30, 0x35, 0x5f,
	0x30, 0x30, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6d, 0x73, 0x43, 0x30, 0x35,
	0x30, 0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x6d, 0x73, 0x5f, 0x63, 0x31, 0x30, 0x5f, 0x30, 0x30,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6d, 0x73, 0x43, 0x31, 0x30, 0x30, 0x30,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6d, 0x73, 0x5f, 0x63, 0x73, 0x65, 0x63, 0x73, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6d, 0x73, 0x43, 0x73, 0x65, 0x63, 0x73, 0x12, 0x1c, 0x0a,
	0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x70, 0x6d, 0x30, 0x31, 0x5f, 0x30, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x50, 0x6d, 0x30, 0x31, 0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x6f,
	0x70, 0x63, 0x5f, 0x70, 0x6d, 0x30, 0x32, 0x5f, 0x35, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6f, 0x70, 0x63, 0x50, 0x6d, 0x30, 0x32, 0x35, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63,
	0x5f, 0x70, 0x6d, 0x31, 0x30, 0x5f, 0x30, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6f,
	0x70, 0x63, 0x50, 0x6d, 0x31, 0x30, 0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x63,
	0x30, 0x30, 0x5f, 0x33, 0x38, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63,
	0x43, 0x30, 0x30, 0x33, 0x38, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x63, 0x30, 0x30,
	0x5f, 0x35, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x43, 0x30,
	0x30, 0x35, 0x34, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x63, 0x30, 0x31, 0x5f, 0x30,
	0x30, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x43, 0x30, 0x31, 0x30,
	0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x63, 0x30, 0x32, 0x5f, 0x31, 0x30, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x43, 0x30, 0x32, 0x31, 0x30, 0x12,
	0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x63, 0x30, 0x35, 0x5f, 0x30, 0x30, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x43, 0x30, 0x35, 0x30, 0x30, 0x12, 0x1c, 0x0a,
	0x0a, 0x6f, 0x70, 0x63, 0x5f, 0x63, 0x31, 0x30, 0x5f, 0x30, 0x30, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x43, 0x31, 0x30, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x70, 0x63, 0x5f, 0x63, 0x73, 0x65, 0x63, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6f, 0x70, 0x63, 0x43, 0x73, 0x65, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x65, 0x6e, 0x76, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x63, 0x63,
	0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x49,
	0x63, 0x63, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x66,
	0x75, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x73, 0x44, 0x66,
	0x75, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x65,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x70, 0x73, 0x69,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x43, 0x70, 0x73,
	0x69, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x47, 0x70, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x74, 0x74, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x74, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6e, 0x64, 0x5f, 0x37, 0x33, 0x31, 0x38, 0x63, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6e, 0x64, 0x37, 0x33, 0x31, 0x38, 0x63, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6e, 0x61, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x61, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6c, 0x6f, 0x72, 0x61, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x54, 0x65,
	0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x5f, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x70, 0x63,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x4f, 0x70,
	0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x6d, 0x73, 0x18,
	0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x6d, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x62, 0x6d, 0x65, 0x30, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x6d, 0x65,
	0x30, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x62, 0x6d, 0x65, 0x31,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x6d,
	0x65, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x72,
	0x61, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x4c,
	0x6f, 0x72, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x66, 0x6f,
	0x6e, 0x61, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x46, 0x6f, 0x6e, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x67,
	0x65, 0x69, 0x67, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x47, 0x65, 0x69, 0x67, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x30, 0x31, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x4d, 0x61, 0x78, 0x30, 0x31, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x75, 0x67, 0x70, 0x73, 0x18, 0x56, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x55, 0x67, 0x70, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x77, 0x69, 0x18, 0x57, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x54, 0x77, 0x69, 0x12, 0x26, 0x0a, 0x0f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x77, 0x69, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x54, 0x77, 0x69,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x4c, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x73, 0x70,
	0x69, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x53,
	0x70, 0x69, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4c, 0x6f,
	0x72, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x6f, 0x6e, 0x61, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x6f,
	0x6e, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x5d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x61, 0x6e,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x61, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x5f, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x73, 0x41, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6e, 0x64,
	0x5f, 0x37, 0x31, 0x32, 0x75, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6e, 0x64,
	0x37, 0x31, 0x32, 0x75, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6e, 0x64, 0x5f, 0x37, 0x38, 0x30, 0x31,
	0x37, 0x77, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6e, 0x64, 0x37, 0x38, 0x30,
	0x31, 0x37, 0x77, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x64, 0x30, 0x31, 0x5f, 0x30, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x53, 0x74, 0x64, 0x30, 0x31, 0x30, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x64, 0x30, 0x32, 0x5f, 0x35, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x53, 0x74, 0x64, 0x30, 0x32, 0x35, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x64, 0x31, 0x30, 0x5f, 0x30, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x53, 0x74, 0x64, 0x31, 0x30, 0x30, 0x12, 0x1e, 0x0a,
	0x0b, 0x6f, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x64, 0x30, 0x31, 0x5f, 0x30, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6f, 0x70, 0x63, 0x53, 0x74, 0x64, 0x30, 0x31, 0x30, 0x12, 0x1e, 0x0a,
	0x0b, 0x6f, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x64, 0x30, 0x32, 0x5f, 0x35, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6f, 0x70, 0x63, 0x53, 0x74, 0x64, 0x30, 0x32, 0x35, 0x12, 0x1e, 0x0a,
	0x0b, 0x6f, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x64, 0x31, 0x30, 0x5f, 0x30, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6f, 0x70, 0x63, 0x53, 0x74, 0x64, 0x31, 0x30, 0x30, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x6c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x4d, 0x74, 0x75, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x70, 0x6d, 0x30, 0x31, 0x5f, 0x30, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x32, 0x50, 0x6d, 0x30, 0x31, 0x30, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x70, 0x6d, 0x30, 0x32, 0x5f, 0x35, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x32, 0x50, 0x6d, 0x30, 0x32, 0x35, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x70, 0x6d, 0x31, 0x30, 0x5f, 0x30, 0x18, 0x70, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x32, 0x50, 0x6d, 0x31, 0x30, 0x30, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x63, 0x30, 0x30, 0x5f, 0x33, 0x30, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x32, 0x43, 0x30, 0x30, 0x33, 0x30, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x63, 0x30, 0x30, 0x5f, 0x35, 0x30, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x32, 0x43, 0x30, 0x30, 0x35, 0x30, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x63, 0x30, 0x31, 0x5f, 0x30, 0x30, 0x18, 0x73, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x32, 0x43, 0x30, 0x31, 0x30, 0x30, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x63, 0x30, 0x32, 0x5f, 0x35, 0x30, 0x18, 0x74, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x32, 0x43, 0x30, 0x32, 0x35, 0x30, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x63, 0x30, 0x35, 0x5f, 0x30, 0x30, 0x18, 0x75, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x32, 0x43, 0x30, 0x35, 0x30, 0x30, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x63, 0x31, 0x30, 0x5f, 0x30, 0x30, 0x18, 0x76, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x32, 0x43, 0x31, 0x30, 0x30, 0x30, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x63, 0x73, 0x65, 0x63, 0x73, 0x18, 0x77, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x32, 0x43, 0x73, 0x65, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x6d, 0x73, 0x32, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x50, 0x6d, 0x73, 0x32, 0x12, 0x20, 0x0a,
	0x0c, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x73, 0x74, 0x64, 0x30, 0x31, 0x5f, 0x30, 0x18, 0x79, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x6d, 0x73, 0x32, 0x53, 0x74, 0x64, 0x30, 0x31, 0x30, 0x12,
	0x20, 0x0a, 0x0c, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x73, 0x74, 0x64, 0x30, 0x32, 0x5f, 0x35, 0x18,
	0x7a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x6d, 0x73, 0x32, 0x53, 0x74, 0x64, 0x30, 0x32,
	0x35, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6d, 0x73, 0x32, 0x5f, 0x73, 0x74, 0x64, 0x31, 0x30, 0x5f,
	0x30, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x6d, 0x73, 0x32, 0x53, 0x74, 0x64,
	0x31, 0x30, 0x30, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x47, 0x45, 0x49, 0x47, 0x49, 0x45, 0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x54, 0x41, 0x50, 0x50, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x54, 0x4e, 0x4f, 0x44,
	0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x54, 0x47, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x54, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x54, 0x47, 0x41, 0x54, 0x45, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x22, 0x26, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x01,
}

var (
	file_tt_proto_rawDescOnce sync.Once
	file_tt_proto_rawDescData = file_tt_proto_rawDesc
)

func file_tt_proto_rawDescGZIP() []byte {
	file_tt_proto_rawDescOnce.Do(func() {
		file_tt_proto_rawDescData = protoimpl.X.CompressGZIP(file_tt_proto_rawDescData)
	})
	return file_tt_proto_rawDescData
}

var file_tt_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tt_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tt_proto_goTypes = []interface{}{
	(TelecastDeviceType)(0), // 0: ttproto.Telecast.deviceType
	(TelecastReplyType)(0),  // 1: ttproto.Telecast.replyType
	(*Telecast)(nil),        // 2: ttproto.Telecast
}
var file_tt_proto_depIdxs = []int32{
	0, // 0: ttproto.Telecast.device_type:type_name -> ttproto.Telecast.deviceType
	1, // 1: ttproto.Telecast.reply_type:type_name -> ttproto.Telecast.replyType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tt_proto_init() }
func file_tt_proto_init() {
	if File_tt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telecast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tt_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tt_proto_goTypes,
		DependencyIndexes: file_tt_proto_depIdxs,
		EnumInfos:         file_tt_proto_enumTypes,
		MessageInfos:      file_tt_proto_msgTypes,
	}.Build()
	File_tt_proto = out.File
	file_tt_proto_rawDesc = nil
	file_tt_proto_goTypes = nil
	file_tt_proto_depIdxs = nil
}
